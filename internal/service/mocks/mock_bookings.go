// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/service/bookings.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/sunil-dev608/space-trouble/internal/pkg/model"
)

// MockBookingService is a mock of BookingService interface.
type MockBookingService struct {
	ctrl     *gomock.Controller
	recorder *MockBookingServiceMockRecorder
}

// MockBookingServiceMockRecorder is the mock recorder for MockBookingService.
type MockBookingServiceMockRecorder struct {
	mock *MockBookingService
}

// NewMockBookingService creates a new mock instance.
func NewMockBookingService(ctrl *gomock.Controller) *MockBookingService {
	mock := &MockBookingService{ctrl: ctrl}
	mock.recorder = &MockBookingServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBookingService) EXPECT() *MockBookingServiceMockRecorder {
	return m.recorder
}

// CreateBooking mocks base method.
func (m *MockBookingService) CreateBooking(ctx context.Context, booking *model.BookingDB) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBooking", ctx, booking)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBooking indicates an expected call of CreateBooking.
func (mr *MockBookingServiceMockRecorder) CreateBooking(ctx, booking interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBooking", reflect.TypeOf((*MockBookingService)(nil).CreateBooking), ctx, booking)
}

// DeleteBooking mocks base method.
func (m *MockBookingService) DeleteBooking(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBooking", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBooking indicates an expected call of DeleteBooking.
func (mr *MockBookingServiceMockRecorder) DeleteBooking(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBooking", reflect.TypeOf((*MockBookingService)(nil).DeleteBooking), ctx, id)
}

// GetAllBookings mocks base method.
func (m *MockBookingService) GetAllBookings(ctx context.Context) ([]model.Booking, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllBookings", ctx)
	ret0, _ := ret[0].([]model.Booking)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllBookings indicates an expected call of GetAllBookings.
func (mr *MockBookingServiceMockRecorder) GetAllBookings(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllBookings", reflect.TypeOf((*MockBookingService)(nil).GetAllBookings), ctx)
}
